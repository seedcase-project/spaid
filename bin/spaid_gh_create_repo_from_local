#!/bin/zsh

help_text="
Usage: `basename $0` [<org>] [<repo>] [<description>] [-h]

Create a GitHub repository from a local (working directory) Git repository.
This function will then

- Sets the repo to public.
- Uses the working directory as the root for the local Git repository.
- Includes a description of the newly created repository.
- Pushes the local repo to the new repo.
- Disables the wiki.
- Sets the URL for the homepage following the pattern 'https://REPO.ORG.org'
  (assuming you use '.org' as your domain ending and that you manage your
  website build via something like Netlify).

Afterwards, it's good practice to run 'spaid_gh_set_repo_settings' to set some
default settings for the newly created repository.

Examples:

    $ spaid_gh_create_repo_from_local seedcase-project seedcase-theme 'Seedcase theme repo'

Positional arguments:

- org: The name of the GitHub organization.
- repo: The name of the repository you want created in the GitHub organization.
  Should match the folder this is run in.
- description: The description of the contents of the repository that is display
  in the repository's listing.
"

if [[ "$1" == "-h" ]] ; then
    echo $help_text
    exit 0
fi

org="$1"
repo="$2"
description="$3"

if [[ "$org" == "" ]] ; then
    echo "Error: No organization has been given. Please provide one."
    exit 1
fi

if [[ "$repo" == "" ]] ; then
    echo "Error: No repository name has been given. Please provide one."
    exit 1
fi

if [[ "$description" == "" ]] ; then
    echo "Error: No description has been given. Please provide one."
    exit 1
fi

gh repo create $org/$repo \
  --public \
  --source=. \
  --push \
  --disable-wiki \
  --description $description \
  --homepage https://$repo.$org.org
